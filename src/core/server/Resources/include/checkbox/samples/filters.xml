<?xml version="1.0"?>
<root>
  <item>
    <name>Filters</name>
    <!-- application only -->
    <item>
      <name>application</name>
      <appendix>A to B if application == TERMINAL (KeyToKey)</appendix>
      <appendix>A to C if application != TERMINAL (KeyToKey)</appendix>
      <appendix>Volume Mute to B if application == TERMINAL (ConsumerToKey)</appendix>
      <appendix>Volume Mute to C if application != TERMINAL (ConsumerToKey)</appendix>
      <identifier>remap.samples_application</identifier>
      <block>
        <only>TERMINAL</only>
        <autogen>__KeyToKey__ KeyCode::A, KeyCode::B</autogen>
        <autogen>__KeyToKey__ ConsumerKeyCode::VOLUME_MUTE, KeyCode::B</autogen>
      </block>
      <block>
        <not>TERMINAL</not>
        <autogen>__KeyToKey__ KeyCode::A, KeyCode::C</autogen>
        <autogen>__KeyToKey__ ConsumerKeyCode::VOLUME_MUTE, KeyCode::C</autogen>
      </block>
    </item>

    <item>
      <name>window name</name>
      <appendix>Change the right shift key to the Launchpad key when Gmail on Google Chrome.</appendix>
      <appendix>Change the right option key to the Launchpad key on Google Chrome except Gmail.</appendix>
      <identifier>remap.samples_windowname</identifier>
      <block>
        <only>GOOGLE_CHROME</only>
        <windowname_only>Gmail</windowname_only>
        <autogen>__KeyToKey__ KeyCode::SHIFT_R, KeyCode::LAUNCHPAD</autogen>
      </block>
      <block>
        <only>GOOGLE_CHROME</only>
        <windowname_not>Gmail</windowname_not>
        <autogen>__KeyToKey__ KeyCode::OPTION_R, KeyCode::LAUNCHPAD</autogen>
      </block>
    </item>

    <item>
      <name>UIElementRole</name>
      <appendix>Change hjkl keys to arrow keys on Finder except editing text (eg. filename).</appendix>
      <appendix>Change the right shift key to the delete key when editing text on Finder.</appendix>
      <identifier>remap.samples_uielementrole</identifier>
      <block>
        <only>FINDER</only>
        <uielementrole_not>AXTextField, AXTextArea</uielementrole_not>
        <autogen>__KeyToKey__ KeyCode::H, KeyCode::CURSOR_LEFT</autogen>
        <autogen>__KeyToKey__ KeyCode::J, KeyCode::CURSOR_DOWN</autogen>
        <autogen>__KeyToKey__ KeyCode::K, KeyCode::CURSOR_UP</autogen>
        <autogen>__KeyToKey__ KeyCode::L, KeyCode::CURSOR_RIGHT</autogen>
      </block>
      <block>
        <only>FINDER</only>
        <uielementrole_only>AXTextField, AXTextArea</uielementrole_only>
        <autogen>__KeyToKey__ KeyCode::SHIFT_R, KeyCode::DELETE</autogen>
      </block>
    </item>

    <!-- Device only -->
    <item>
      <name>Device only</name>
      <appendix>A to B if (VendorID,ProductID) == (0x5ac,0x21a) or (0x5ac,0x222)</appendix>
      <appendix>A to C unless (VendorID,ProductID) == (0x5ac,0x21a) or (0x5ac,0x222)</appendix>
      <appendix>S to Tab if VendorID == DeviceVendor::APPLE_COMPUTER (DeviceProduct::ANY)</appendix>
      <appendix>S to Space unless VendorID == DeviceVendor::APPLE_COMPUTER (DeviceProduct::ANY)</appendix>
      <appendix>Disable ScrollWheel on Pixart_Imaging_Inc_Optical_Mouse_0x2510 with</appendix>
      <appendix>LocationID:EXAMPLE_USB_BUS_1</appendix>
      <appendix></appendix>
      <appendix>* (0x5ac,0x21a) is MacBookPro2,1</appendix>
      <appendix>* (0x5ac,0x222) is Apple Aluminum Keyboard (JIS)</appendix>
      <identifier>remap.samples_device</identifier>
      <block>
        <device_only>
          <!-- 1st device -->
          DeviceVendor::APPLE_COMPUTER, DeviceProduct::APPLE_INTERNAL_KEYBOARD_TRACKPAD_0x021a,

          <!-- 2nd device -->
          DeviceVendor::APPLE_COMPUTER, DeviceProduct::APPLE_ALUMINUM_KEYBOARD_JIS
        </device_only>
        <autogen>__KeyToKey__ KeyCode::A, KeyCode::B</autogen>
      </block>
      <block>
        <device_not>
          <!-- 1st device -->
          DeviceVendor::APPLE_COMPUTER, DeviceProduct::APPLE_INTERNAL_KEYBOARD_TRACKPAD_0x021a,

          <!-- 2nd device -->
          DeviceVendor::APPLE_COMPUTER, DeviceProduct::APPLE_ALUMINUM_KEYBOARD_JIS
        </device_not>
        <autogen>__KeyToKey__ KeyCode::A, KeyCode::C</autogen>
      </block>
      <block>
        <device_only>
          DeviceVendor::APPLE_COMPUTER, DeviceProduct::ANY,
        </device_only>
        <autogen>__KeyToKey__ KeyCode::S, KeyCode::TAB</autogen>
      </block>
      <block>
        <device_not>
          DeviceVendor::APPLE_COMPUTER, DeviceProduct::ANY,
        </device_not>
        <autogen>__KeyToKey__ KeyCode::S, KeyCode::SPACE</autogen>
      </block>
      <block>
        <device_only>
          DeviceVendor::Pixart_Imaging_Inc,
          DeviceProduct::Pixart_Imaging_Inc_Optical_Mouse_0x2510,
          DeviceLocation::EXAMPLE_USB_BUS_1
        </device_only>
        <autogen>__DropScrollWheel__</autogen>
      </block>
    </item>

    <!-- Config only -->
    <item>
      <name>Config only</name>
      <item>
        <name>Core</name>
        <identifier>remap.samples_config</identifier>
        <appendix>A to 1 if samples_config_mode1 == active</appendix>
        <appendix>B to 2 if samples_config_mode1 or samples_config_mode2 == active</appendix>
        <appendix>A to 3 if samples_config_mode1 != active</appendix>
        <appendix>B to 4 if samples_config_mode1 and samples_config_mode2 != active</appendix>
        <appendix>C to 5</appendix>
        <block>
          <config_only>option.samples_config_mode1</config_only>
          <autogen>__KeyToKey__ KeyCode::A, KeyCode::KEY_1</autogen>
        </block>
        <block>
          <config_only>option.samples_config_mode1, option.samples_config_mode2</config_only>
          <autogen>__KeyToKey__ KeyCode::B, KeyCode::KEY_2</autogen>
        </block>
        <block>
          <config_not>option.samples_config_mode1</config_not>
          <autogen>__KeyToKey__ KeyCode::A, KeyCode::KEY_3</autogen>
        </block>
        <block>
          <config_not>option.samples_config_mode1, option.samples_config_mode2</config_not>
          <autogen>__KeyToKey__ KeyCode::B, KeyCode::KEY_4</autogen>
        </block>
        <block>
          <autogen>__KeyToKey__ KeyCode::C, KeyCode::KEY_5</autogen>
        </block>
      </item>
      <item>
        <name>Config only mode1</name>
        <identifier vk_config="true">option.samples_config_mode1</identifier>
      </item>
      <item>
        <name>Config only mode2</name>
        <identifier>option.samples_config_mode2</identifier>
      </item>
      <item><name>──────────────────────────────</name></item>
      <item>
        <name>With KEYTOKEY_BEFORE_KEYDOWN, KEYTOKEY_AFTER_KEYUP</name>
        <appendix>Space to Tab (And Before A, After B)</appendix>
        <appendix>(If you type Space key, a sequence of "A,Tab,B" is fired.)</appendix>
        <identifier>remap.samples_config_before_keydown</identifier>

        <config_not>option.samples_config_mode1</config_not>
        <autogen>
          __KeyToKey__ KeyCode::SPACE, KeyCode::TAB,
          Option::KEYTOKEY_BEFORE_KEYDOWN, KeyCode::VK_CONFIG_FORCE_ON_option_samples_config_mode1, KeyCode::A,
          Option::KEYTOKEY_AFTER_KEYUP, KeyCode::VK_CONFIG_FORCE_OFF_option_samples_config_mode1, KeyCode::B
        </autogen>
      </item>
    </item>

    <!-- inputsource only -->
    <!-- inputsource not -->
    <item>
      <name>Input Source</name>
      <item>
        <name>bépo</name>
        <item>
          <name>inputsource_only (bépo-*)</name>
          <appendix>Space to Tab</appendix>
          <identifier>remap.samples_inputsource_bepo</identifier>
          <inputsource_only>BEPO</inputsource_only>
          <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
        </item>
        <item>
          <name>inputsource_only (bépo)</name>
          <appendix>Space to Tab</appendix>
          <identifier>remap.samples_inputsource_bepo_standard</identifier>
          <inputsource_only>BEPO_STANDARD</inputsource_only>
          <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
        </item>
        <item>
          <name>inputsource_only (bépo-AzertyCmd)</name>
          <appendix>Space to Tab</appendix>
          <identifier>remap.samples_inputsource_bepo_azertycmd</identifier>
          <inputsource_only>BEPO_AZERTYCMD</inputsource_only>
          <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
        </item>
        <item>
          <name>inputsource_only (bépo-AzertyCmdRoman)</name>
          <appendix>Space to Tab</appendix>
          <identifier>remap.samples_inputsource_bepo_azertycmdroman</identifier>
          <inputsource_only>BEPO_AZERTYCMDROMAN</inputsource_only>
          <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
        </item>
        <item>
          <name>inputsource_only (bépo-QwertyCmd)</name>
          <appendix>Space to Tab</appendix>
          <identifier>remap.samples_inputsource_bepo_qwertycmd</identifier>
          <inputsource_only>BEPO_QWERTYCMD</inputsource_only>
          <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
        </item>
        <item>
          <name>inputsource_only (bépo-QwertyCmdRoman)</name>
          <appendix>Space to Tab</appendix>
          <identifier>remap.samples_inputsource_bepo_qwertycmdroman</identifier>
          <inputsource_only>BEPO_QWERTYCMDROMAN</inputsource_only>
          <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
        </item>
        <item>
          <name>inputsource_only (bépo-QwertzCmd)</name>
          <appendix>Space to Tab</appendix>
          <identifier>remap.samples_inputsource_bepo_qwertzcmd</identifier>
          <inputsource_only>BEPO_QWERTZCMD</inputsource_only>
          <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
        </item>
        <item>
          <name>inputsource_only (bépo-QwertzCmdRoman)</name>
          <appendix>Space to Tab</appendix>
          <identifier>remap.samples_inputsource_bepo_qwertzcmdroman</identifier>
          <inputsource_only>BEPO_QWERTZCMDROMAN</inputsource_only>
          <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
        </item>
        <item>
          <name>inputsource_only (bépo-Roman)</name>
          <appendix>Space to Tab</appendix>
          <identifier>remap.samples_inputsource_bepo_roman</identifier>
          <inputsource_only>BEPO_ROMAN</inputsource_only>
          <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
        </item>
      </item>
      <item>
        <name>inputsource_only (Chinese Traditional-*)</name>
        <appendix>Space to Tab</appendix>
        <identifier>remap.samples_inputsource_tradchinese</identifier>
        <inputsource_only>CHINESE_TRADITIONAL</inputsource_only>
        <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
      </item>
      <item>
        <name>inputsource_only (Chinese Traditional Yahoo! KeyKey)</name>
        <appendix>Space to Tab</appendix>
        <identifier>remap.samples_inputsource_tradchinese_yahoo_keykey</identifier>
        <inputsource_only>CHINESE_TRADITIONAL_YAHOO_KEYKEY</inputsource_only>
        <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
      </item>
      <item>
        <name>inputsource_only (Chinese Simplified-*)</name>
        <appendix>Space to Tab</appendix>
        <identifier>remap.samples_inputsource_simpchinese</identifier>
        <inputsource_only>CHINESE_SIMPLIFIED</inputsource_only>
        <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
      </item>
      <item>
        <name>inputsource_only (Canadian)</name>
        <appendix>Space to Tab</appendix>
        <identifier>remap.samples_inputsource_canadian</identifier>
        <inputsource_only>CANADIAN</inputsource_only>
        <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
      </item>
      <item>
        <name>Dvorak</name>
        <item>
          <name>inputsource_only (Dvorak-*)</name>
          <appendix>Space to Tab</appendix>
          <identifier>remap.samples_inputsource_dvorak</identifier>
          <inputsource_only>DVORAK</inputsource_only>
          <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
        </item>
        <item>
          <name>inputsource_only (Dvorak)</name>
          <appendix>Space to Tab</appendix>
          <identifier>remap.samples_inputsource_dvorak_standard</identifier>
          <inputsource_only>DVORAK_STANDARD</inputsource_only>
          <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
        </item>
        <item>
          <name>inputsource_only (Dvorak-Left)</name>
          <appendix>Space to Tab</appendix>
          <identifier>remap.samples_inputsource_dvorak_left</identifier>
          <inputsource_only>DVORAK_LEFT</inputsource_only>
          <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
        </item>
        <item>
          <name>inputsource_only (Dvorak-QwertyCmd)</name>
          <appendix>Space to Tab</appendix>
          <identifier>remap.samples_inputsource_dvorak_qwertycmd</identifier>
          <inputsource_only>DVORAK_QWERTYCMD</inputsource_only>
          <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
        </item>
        <item>
          <name>inputsource_only (Dvorak-Right)</name>
          <appendix>Space to Tab</appendix>
          <identifier>remap.samples_inputsource_dvorak_right</identifier>
          <inputsource_only>DVORAK_RIGHT</inputsource_only>
          <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
        </item>
      </item>
      <item>
        <name>inputsource_only (English)</name>
        <appendix>Space to Tab</appendix>
        <identifier>remap.samples_inputsource_roman</identifier>
        <inputsource_only>ENGLISH</inputsource_only>
        <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
      </item>
      <item>
        <name>inputsource_only (Finnish)</name>
        <appendix>Space to Tab</appendix>
        <identifier>remap.samples_inputsource_finnish</identifier>
        <inputsource_only>FINNISH</inputsource_only>
        <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
      </item>
      <item>
        <name>inputsource_only (French-*)</name>
        <appendix>Space to Tab</appendix>
        <identifier>remap.samples_inputsource_french</identifier>
        <inputsource_only>FRENCH</inputsource_only>
        <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
      </item>
      <item>
        <name>Japanese</name>
        <item>
          <name>inputsource_only (Japanese-*)</name>
          <appendix>Space to Tab</appendix>
          <identifier>remap.samples_inputsource_japanese</identifier>
          <inputsource_only>JAPANESE</inputsource_only>
          <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
        </item>
        <item>
          <name>inputsource_not (Japanese-*)</name>
          <appendix>Space to Tab</appendix>
          <identifier>remap.samples_inputsource_not_japanese</identifier>
          <inputsource_not>JAPANESE</inputsource_not>
          <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
        </item>
        <item>
          <name>inputsource_only (Japanese-Hiragana)</name>
          <appendix>Space to Tab</appendix>
          <identifier>remap.samples_inputsource_japanese_hiragana</identifier>
          <inputsource_only>JAPANESE_HIRAGANA</inputsource_only>
          <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
        </item>
        <item>
          <name>inputsource_not (Japanese-Hiragana)</name>
          <appendix>Space to Tab</appendix>
          <identifier>remap.samples_inputsource_not_japanese_hiragana</identifier>
          <inputsource_not>JAPANESE_HIRAGANA</inputsource_not>
          <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
        </item>
        <item>
          <name>inputsource_only (Japanese-Katakana)</name>
          <appendix>Space to Tab</appendix>
          <identifier>remap.samples_inputsource_japanese_katakana</identifier>
          <inputsource_only>JAPANESE_KATAKANA</inputsource_only>
          <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
        </item>
        <item>
          <name>inputsource_only (Japanese-Full-width Roman)</name>
          <appendix>Space to Tab</appendix>
          <identifier>remap.samples_inputsource_japanese_fullwidth_roman</identifier>
          <inputsource_only>JAPANESE_FULLWIDTH_ROMAN</inputsource_only>
          <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
        </item>
        <item>
          <name>inputsource_only (Japanese-Half-width Katakana)</name>
          <appendix>Space to Tab</appendix>
          <identifier>remap.samples_inputsource_japanese_halfwidth_kana</identifier>
          <inputsource_only>JAPANESE_HALFWIDTH_KANA</inputsource_only>
          <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
        </item>
        <item>
          <name>inputsource_only (JANSI)</name>
          <appendix>Space to Tab</appendix>
          <identifier>remap.samples_inputsource_roman_jansi</identifier>
          <inputsource_only>JANSI</inputsource_only>
          <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
        </item>
        <item>
          <name>Enforce roman input at semicolon(;).</name>
          <identifier>remap.samples_inputsource_semicolon</identifier>
          <inputsource_only>JAPANESE</inputsource_only>
          <autogen>
            __KeyToKey__ KeyCode::SEMICOLON, ModifierFlag::NONE, KeyCode::SEMICOLON,
            Option::KEYTOKEY_BEFORE_KEYDOWN, KeyCode::JIS_EISUU,
            Option::KEYTOKEY_AFTER_KEYUP, KeyCode::JIS_KANA
          </autogen>
        </item>
      </item>
      <item>
        <name>inputsource_only (Korean-*)</name>
        <appendix>Space to Tab</appendix>
        <identifier>remap.samples_inputsource_korean</identifier>
        <inputsource_only>KOREAN</inputsource_only>
        <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
      </item>
      <item>
        <name>Polish</name>
        <item>
          <name>inputsource_only (Polish-*)</name>
          <appendix>Space to Tab</appendix>
          <identifier>remap.samples_inputsource_polish</identifier>
          <inputsource_only>POLISH</inputsource_only>
          <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
        </item>
        <item>
          <name>inputsource_only (Polish)</name>
          <appendix>Space to Tab</appendix>
          <identifier>remap.samples_inputsource_polish_standard</identifier>
          <inputsource_only>POLISH_STANDARD</inputsource_only>
          <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
        </item>
        <item>
          <name>inputsource_only (Polish Pro)</name>
          <appendix>Space to Tab</appendix>
          <identifier>remap.samples_inputsource_polishpro</identifier>
          <inputsource_only>POLISH_PRO</inputsource_only>
          <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
        </item>
      </item>
      <item>
        <name>inputsource_only (Swedish)</name>
        <appendix>Space to Tab</appendix>
        <identifier>remap.samples_inputsource_swedish</identifier>
        <inputsource_only>SWEDISH</inputsource_only>
        <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
      </item>
      <item>
        <name>inputsource_only (Russian)</name>
        <appendix>Space to Tab</appendix>
        <identifier>remap.samples_inputsource_russian</identifier>
        <inputsource_only>RUSSIAN</inputsource_only>
        <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
      </item>
      <item>
        <name>inputsource_only (Thai)</name>
        <appendix>Space to Tab</appendix>
        <identifier>remap.samples_inputsource_thai</identifier>
        <inputsource_only>THAI</inputsource_only>
        <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
      </item>
      <item>
        <name>inputsource_only (German)</name>
        <appendix>Space to Tab</appendix>
        <identifier>remap.samples_inputsource_german</identifier>
        <inputsource_only>GERMAN</inputsource_only>
        <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
      </item>
      <item>
        <name>inputsource_only (Slovenian)</name>
        <appendix>Space to Tab</appendix>
        <identifier>remap.samples_inputsource_slovenian</identifier>
        <inputsource_only>SLOVENIAN</inputsource_only>
        <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
      </item>
      <item>
        <name>inputsource_only (Czech)</name>
        <appendix>Space to Tab</appendix>
        <identifier>remap.samples_inputsource_czech</identifier>
        <inputsource_only>CZECH</inputsource_only>
        <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
      </item>
      <item>
        <name>inputsource_only (British)</name>
        <appendix>Space to Tab</appendix>
        <identifier>remap.samples_inputsource_british</identifier>
        <inputsource_only>BRITISH</inputsource_only>
        <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
      </item>
      <item>
        <name>inputsource_only (Bulgarian)</name>
        <appendix>Space to Tab</appendix>
        <identifier>remap.samples_inputsource_bulgarian</identifier>
        <inputsource_only>BULGARIAN</inputsource_only>
        <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
      </item>
      <item>
        <name>inputsource_only (Swiss)</name>
        <appendix>Space to Tab</appendix>
        <identifier>remap.samples_inputsource_swiss</identifier>
        <inputsource_only>SWISS</inputsource_only>
        <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
      </item>
      <item>
        <name>inputsource_only (Croatian)</name>
        <appendix>Space to Tab</appendix>
        <identifier>remap.samples_inputsource_croatian</identifier>
        <inputsource_only>CROATIAN</inputsource_only>
        <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
      </item>
      <item>
        <name>inputsource_only (Hungarian)</name>
        <appendix>Space to Tab</appendix>
        <identifier>remap.samples_inputsource_hungarian</identifier>
        <inputsource_only>HUNGARIAN</inputsource_only>
        <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
      </item>
      <item>
        <name>inputsource_only (Norwegian)</name>
        <appendix>Space to Tab</appendix>
        <identifier>remap.samples_inputsource_norwegian</identifier>
        <inputsource_only>NORWEGIAN</inputsource_only>
        <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
      </item>
      <item>
        <name>inputsource_only (Ukrainian)</name>
        <appendix>Space to Tab</appendix>
        <identifier>remap.samples_inputsource_ukrainian</identifier>
        <inputsource_only>UKRAINIAN</inputsource_only>
        <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
      </item>
    </item>

    <item>
      <name>Modifier</name>
      <item>
        <name>Note:</name>
        <appendix>We cannot use MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_* in</appendix>
        <appendix>&lt;modifier_only&gt;, &lt;modifier_not&gt;.</appendix>
        <appendix></appendix>
        <appendix>Expand these to ModifierFlags.</appendix>
        <appendix>Example: &lt;modifier_only&gt;ModifierFlag::SHIFT_L, ModifierFlag::SHIFT_R&lt;/modifier_only&gt;</appendix>
      </item>
      <item>
        <name>Standard</name>
        <appendix>A to B if Command_L or Option_L is pressed.</appendix>
        <appendix>  // Command_L+A to Command_L+B</appendix>
        <appendix>  // Option_L+A to Option_L+B</appendix>
        <appendix>  // Command_L+Option_L+A to Command_L+Option_L+B</appendix>
        <appendix>  // Command_L+Shift_L+A to Command_L+Shift_L+B</appendix>
        <appendix></appendix>
        <appendix>A to C unless Shift_L or Control_L is pressed.</appendix>
        <appendix>  // A to C</appendix>
        <appendix>  // Shift_R+A to Shift_R+C</appendix>
        <appendix>  // Control_L+A to Control_L+A</appendix>
        <appendix>  // Shift_L+A to Shift_L+A</appendix>
        <appendix>  // Shift_L+Command_R+A to Shift_L+Command_R+A</appendix>
        <identifier>remap.samples_modifier_standard</identifier>
        <block>
          <modifier_only>ModifierFlag::COMMAND_L, ModifierFlag::OPTION_L</modifier_only>
          <autogen>__KeyToKey__ KeyCode::A, KeyCode::B</autogen>
        </block>
        <block>
          <modifier_not>ModifierFlag::SHIFT_L, ModifierFlag::CONTROL_L</modifier_not>
          <autogen>__KeyToKey__ KeyCode::A, KeyCode::C</autogen>
        </block>
      </item>
      <item>
        <name>Combination</name>
        <appendix>B to D if "Control_L+Option_L" or "Command_L+Option_L" is pressed.</appendix>
        <appendix>  // Control_L+Option_L+B to Control_L+Option_L+D</appendix>
        <appendix>  // Command_L+Option_L+B to Command_L+Option_L+D</appendix>
        <appendix>  // Command_L+Option_L+Shift_L+B to Command_L+Option_L+Shift_L+D</appendix>
        <appendix></appendix>
        <appendix>B to E unless "COMMAND_L+SHIFT_L" or "COMMAND_L+SHIFT_R" is pressed.</appendix>
        <appendix>  // B to E</appendix>
        <appendix>  // Command_L+B to Command_L+E</appendix>
        <appendix>  // Command_L+Shift_L+B to Command_L+Shift_L+B</appendix>
        <appendix>  // Command_L+Shift_R+B to Command_L+Shift_R+B</appendix>
        <identifier>remap.samples_modifier_combination</identifier>
        <block>
          <modifier_only>ModifierFlag::CONTROL_L | ModifierFlag::OPTION_L, ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L</modifier_only>
          <autogen>__KeyToKey__ KeyCode::B, KeyCode::D</autogen>
        </block>
        <block>
          <modifier_not>ModifierFlag::COMMAND_L | ModifierFlag::SHIFT_L, ModifierFlag::COMMAND_L | ModifierFlag::SHIFT_R</modifier_not>
          <autogen>__KeyToKey__ KeyCode::B, KeyCode::E</autogen>
        </block>
      </item>
      <item>
        <name>With ModifierFlag::NONE</name>
        <appendix>C to F if Shift_L is pressed. (And no other modifiers are pressed.)</appendix>
        <appendix>  // C to C</appendix>
        <appendix>  // Shift_L+C to Shift_L+F</appendix>
        <appendix>  // Command_L+Shift_L+C to Command_L+Shift_L+C</appendix>
        <identifier>remap.samples_modifier_with_none</identifier>
        <block>
          <modifier_only>ModifierFlag::SHIFT_L | ModifierFlag::NONE</modifier_only>
          <autogen>__KeyToKey__ KeyCode::C, KeyCode::F</autogen>
        </block>
      </item>

      <item>
        <name>Lock and Sticky</name>
        <appendix>Use the left shift key as the sticky modifier with lock.</appendix>
        <appendix></appendix>
        <appendix>+ Change A to f1 if the left shift key is stuck.</appendix>
        <appendix>+ Change A to f2 if the left shift key is locked.</appendix>
        <appendix>+ Change A to f3 if the left shift key is not stuck and locked.</appendix>
        <appendix>+ Change S to f1 if the left shift key is not stuck.</appendix>
        <appendix>+ Change D to f1 if the left shift key is not locked.</appendix>
        <identifier>remap.samples_modifier_lock_sticky</identifier>

        <!-- ======================================== -->
        <!-- sticky modifier -->
        <block>
          <modifierlocked_only>ModifierFlag::SHIFT_L</modifierlocked_only>
          <autogen>
            __KeyOverlaidModifier__
            KeyCode::SHIFT_L,

            @begin
            KeyCode::SHIFT_L,
            @end

            @begin
            KeyCode::VK_LOCK_SHIFT_L_FORCE_OFF,
            KeyCode::VK_STICKY_SHIFT_L_FORCE_OFF,
            @end
          </autogen>
        </block>
        <block>
          <modifierstuck_only>ModifierFlag::SHIFT_L</modifierstuck_only>
          <autogen>
            __KeyOverlaidModifier__
            KeyCode::SHIFT_L,

            @begin
            KeyCode::SHIFT_L,
            @end

            @begin
            KeyCode::VK_LOCK_SHIFT_L_FORCE_ON,
            KeyCode::VK_STICKY_SHIFT_L_FORCE_OFF,
            @end
          </autogen>
        </block>
        <block>
          <autogen>
            __KeyOverlaidModifier__
            KeyCode::SHIFT_L,

            @begin
            KeyCode::SHIFT_L,
            @end

            @begin
            KeyCode::VK_STICKY_ACTIVE_MODIFIERS_FORCE_ON,
            KeyCode::VK_STICKY_SHIFT_L_FORCE_ON,
            @end
          </autogen>
        </block>

        <!-- ======================================== -->
        <!-- Change A key -->
        <block>
          <modifierstuck_only>ModifierFlag::SHIFT_L</modifierstuck_only>
          <autogen>__KeyToKey__ KeyCode::A, KeyCode::F1</autogen>
        </block>
        <block>
          <modifierlocked_only>ModifierFlag::SHIFT_L</modifierlocked_only>
          <autogen>__KeyToKey__ KeyCode::A, KeyCode::F2</autogen>
        </block>
        <autogen>__KeyToKey__ KeyCode::A, KeyCode::F3</autogen>

        <!-- ======================================== -->
        <!-- Change S key -->
        <block>
          <modifierstuck_not>ModifierFlag::SHIFT_L</modifierstuck_not>
          <autogen>__KeyToKey__ KeyCode::S, KeyCode::F1</autogen>
        </block>

        <!-- ======================================== -->
        <!-- Change D key -->
        <block>
          <modifierlocked_not>ModifierFlag::SHIFT_L</modifierlocked_not>
          <autogen>__KeyToKey__ KeyCode::D, KeyCode::F1</autogen>
        </block>
      </item>
    </item>

    <item>
      <name>Last Pressed Physical Key</name>
      <item>
        <name>Standard</name>
        <appendix>Change A to 1 if last pressed physical key is return key.</appendix>
        <appendix>Change Q to 1 unless last pressed physical key is return key.</appendix>
        <appendix>Change S to 2 if last pressed physical key is mute.</appendix>
        <appendix>Change W to 2 unless last pressed physical key is mute.</appendix>
        <appendix>Change D to 3 if last pressed physical key is left click.</appendix>
        <appendix>Change E to 3 unless last pressed physical key is left click.</appendix>
        <identifier>remap.samples_lastpressedphysicalkey</identifier>
        <block>
          <lastpressedphysicalkey_only>KeyCode::RETURN</lastpressedphysicalkey_only>
          <autogen>__KeyToKey__ KeyCode::A, KeyCode::KEY_1</autogen>
        </block>
        <block>
          <lastpressedphysicalkey_not>KeyCode::RETURN</lastpressedphysicalkey_not>
          <autogen>__KeyToKey__ KeyCode::Q, KeyCode::KEY_1</autogen>
        </block>
        <block>
          <lastpressedphysicalkey_only>ConsumerKeyCode::VOLUME_MUTE</lastpressedphysicalkey_only>
          <autogen>__KeyToKey__ KeyCode::S, KeyCode::KEY_2</autogen>
        </block>
        <block>
          <lastpressedphysicalkey_not>ConsumerKeyCode::VOLUME_MUTE</lastpressedphysicalkey_not>
          <autogen>__KeyToKey__ KeyCode::W, KeyCode::KEY_2</autogen>
        </block>
        <block>
          <lastpressedphysicalkey_only>PointingButton::LEFT</lastpressedphysicalkey_only>
          <autogen>__KeyToKey__ KeyCode::D, KeyCode::KEY_3</autogen>
        </block>
        <block>
          <lastpressedphysicalkey_not>PointingButton::LEFT</lastpressedphysicalkey_not>
          <autogen>__KeyToKey__ KeyCode::E, KeyCode::KEY_3</autogen>
        </block>
      </item>
    </item>

    <item>
      <name>Last Released Physical Key</name>
      <item>
        <name>Standard</name>
        <appendix>Change A to 1 if last released physical key is return key.</appendix>
        <appendix>Change Q to 1 unless last released physical key is return key.</appendix>
        <appendix>Change S to 2 if last released physical key is mute.</appendix>
        <appendix>Change W to 2 unless last released physical key is mute.</appendix>
        <appendix>Change D to 3 if last released physical key is left click.</appendix>
        <appendix>Change E to 3 unless last released physical key is left click.</appendix>
        <identifier>remap.samples_lastreleasedphysicalkey</identifier>
        <block>
          <lastreleasedphysicalkey_only>KeyCode::RETURN</lastreleasedphysicalkey_only>
          <autogen>__KeyToKey__ KeyCode::A, KeyCode::KEY_1</autogen>
        </block>
        <block>
          <lastreleasedphysicalkey_not>KeyCode::RETURN</lastreleasedphysicalkey_not>
          <autogen>__KeyToKey__ KeyCode::Q, KeyCode::KEY_1</autogen>
        </block>
        <block>
          <lastreleasedphysicalkey_only>ConsumerKeyCode::VOLUME_MUTE</lastreleasedphysicalkey_only>
          <autogen>__KeyToKey__ KeyCode::S, KeyCode::KEY_2</autogen>
        </block>
        <block>
          <lastreleasedphysicalkey_not>ConsumerKeyCode::VOLUME_MUTE</lastreleasedphysicalkey_not>
          <autogen>__KeyToKey__ KeyCode::W, KeyCode::KEY_2</autogen>
        </block>
        <block>
          <lastreleasedphysicalkey_only>PointingButton::LEFT</lastreleasedphysicalkey_only>
          <autogen>__KeyToKey__ KeyCode::D, KeyCode::KEY_3</autogen>
        </block>
        <block>
          <lastreleasedphysicalkey_not>PointingButton::LEFT</lastreleasedphysicalkey_not>
          <autogen>__KeyToKey__ KeyCode::E, KeyCode::KEY_3</autogen>
        </block>
      </item>
    </item>

    <item>
      <name>Elapsed Time Since Last Pressed</name>
      <item>
        <name>Standard</name>
        <appendix>Change A to 1 if time elapsed since last pressed is greater than 1000ms.</appendix>
        <appendix>Change S to 2 if time elapsed since last pressed is less than 1000ms.</appendix>
        <identifier>remap.samples_elapsedtimesincelastpressed</identifier>
        <block>
          <elapsedtimesincelastpressed_greaterthan>Millisecond::RawValue::1000</elapsedtimesincelastpressed_greaterthan>
          <autogen>__KeyToKey__ KeyCode::A, KeyCode::KEY_1</autogen>
        </block>
        <block>
          <elapsedtimesincelastpressed_lessthan>Millisecond::RawValue::1000</elapsedtimesincelastpressed_lessthan>
          <autogen>__KeyToKey__ KeyCode::S, KeyCode::KEY_2</autogen>
        </block>
      </item>
    </item>

    <item>
      <name>Elapsed Time Since Last Released</name>
      <item>
        <name>Standard</name>
        <appendix>Change A to 1 if time elapsed since last released is greater than 1000ms.</appendix>
        <appendix>Change S to 2 if time elapsed since last released is less than 1000ms.</appendix>
        <identifier>remap.samples_elapsedtimesincelastreleased</identifier>
        <block>
          <elapsedtimesincelastreleased_greaterthan>Millisecond::RawValue::1000</elapsedtimesincelastreleased_greaterthan>
          <autogen>__KeyToKey__ KeyCode::A, KeyCode::KEY_1</autogen>
        </block>
        <block>
          <elapsedtimesincelastreleased_lessthan>Millisecond::RawValue::1000</elapsedtimesincelastreleased_lessthan>
          <autogen>__KeyToKey__ KeyCode::S, KeyCode::KEY_2</autogen>
        </block>
      </item>
    </item>

    <item>
      <name>Pressing Physical Keys Count</name>
      <item>
        <name>Standard</name>
        <appendix>Change A to 1 if pressing physical keys count &lt; 2</appendix>
        <appendix>Change S to 2 if pressing physical keys count &gt; 1</appendix>
        <appendix></appendix>
        <appendix>Example:</appendix>
        <appendix><![CDATA[  Return down, A down, A up, Return up -> Return, A  ]]></appendix>
        <appendix><![CDATA[  Return down, Return up, A down, A up -> Return, 1  ]]></appendix>
        <appendix></appendix>
        <appendix><![CDATA[  Return down, S down, S up, Return up -> Return, 2  ]]></appendix>
        <appendix><![CDATA[  Return down, Return up, S down, S up -> Return, S  ]]></appendix>
        <identifier>remap.samples_pressingphysicalkeys</identifier>
        <block>
          <pressingphysicalkeys_lessthan>2</pressingphysicalkeys_lessthan>
          <autogen>__KeyToKey__ KeyCode::A, KeyCode::KEY_1</autogen>
        </block>
        <block>
          <pressingphysicalkeys_greaterthan>1</pressingphysicalkeys_greaterthan>
          <autogen>__KeyToKey__ KeyCode::S, KeyCode::KEY_2</autogen>
        </block>
      </item>
    </item>

    <item>
      <name>Last Sent Event</name>
      <item>
        <name>Standard</name>
        <appendix>Change 1 to KeyCode::A</appendix>
        <appendix>Change 2 to KeyCode::VK_MODIFIER_EXTRA1</appendix>
        <appendix>Change 3 to KeyCode::SHIFT_L</appendix>
        <appendix></appendix>
        <appendix>Change Return to Tab when:</appendix>
        <appendix>* the last sent event is KeyCode::A, EventType::DOWN</appendix>
        <appendix>* the last sent event is KeyCode::B</appendix>
        <appendix>* the last sent event is KeyCode::VK_MODIFIER_EXTRA1</appendix>
        <appendix>* the last sent event is KeyCode::SHIFT_L</appendix>
        <appendix></appendix>
        <appendix>Change Space to Tab when:</appendix>
        <appendix>* the last sent event is not KeyCode::A</appendix>
        <identifier>remap.samples_lastsentevent</identifier>

        <autogen>__KeyToKey__ KeyCode::KEY_1, KeyCode::A</autogen>
        <autogen>__KeyToKey__ KeyCode::KEY_2, KeyCode::VK_MODIFIER_EXTRA1</autogen>
        <autogen>__KeyToKey__ KeyCode::KEY_3, KeyCode::SHIFT_L</autogen>

        <block>
          <lastsentevent_only>KeyCode::A, EventType::DOWN</lastsentevent_only>
          <autogen>__KeyToKey__ KeyCode::RETURN, KeyCode::TAB</autogen>
        </block>
        <block>
          <!-- If EventType is not specified, this filter works for both EventType::DOWN and EventType::UP. -->
          <lastsentevent_only>KeyCode::B</lastsentevent_only>
          <autogen>__KeyToKey__ KeyCode::RETURN, KeyCode::TAB</autogen>
        </block>
        <block>
          <!-- You cannot use EventType::DOWN and EventType::UP for modifier events. -->
          <!-- Use EventType::MODIFY or do not specify EventType. -->
          <lastsentevent_only>KeyCode::VK_MODIFIER_EXTRA1, EventType::MODIFY</lastsentevent_only>
          <autogen>__KeyToKey__ KeyCode::RETURN, KeyCode::TAB</autogen>
        </block>
        <block>
          <lastsentevent_only>KeyCode::SHIFT_L</lastsentevent_only>
          <autogen>__KeyToKey__ KeyCode::RETURN, KeyCode::TAB</autogen>
        </block>

        <block>
          <lastsentevent_not>KeyCode::A</lastsentevent_not>
          <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
        </block>
      </item>
    </item>

    <!-- block -->
    <item>
      <name>block sample</name>
      <appendix>A to B if application == Terminal (KeyToKey)</appendix>
      <appendix>B to D if application == Terminal (KeyToKey)</appendix>
      <appendix>A to C if application == Safari (KeyToKey)</appendix>
      <appendix>B to E if application == Safari (KeyToKey)</appendix>
      <appendix>(Keep A and B on other apps.)</appendix>
      <appendix>──────────────────────────────</appendix>
      <appendix>Shift+C to Y</appendix>
      <appendix>Shift+D to Z</appendix>
      <appendix>──────────────────────────────</appendix>
      <appendix>Option+C to Option+1 if application == Terminal</appendix>
      <appendix>Command+C to Command+2 if application == Terminal</appendix>
      <appendix>──────────────────────────────</appendix>
      <appendix>Option+C to Option+3 if application == Safari</appendix>
      <appendix>Command+C to Command+4 if application == Safari</appendix>
      <appendix>(Keep Option+C and Command+C on other apps.)</appendix>
      <identifier>remap.samples_block</identifier>
      <block>
        <only>TERMINAL</only>
        <autogen>__KeyToKey__ KeyCode::A, KeyCode::B</autogen>
        <autogen>__KeyToKey__ KeyCode::B, KeyCode::D</autogen>
      </block>
      <block>
        <only>SAFARI</only>
        <autogen>__KeyToKey__ KeyCode::A, KeyCode::C</autogen>
        <autogen>__KeyToKey__ KeyCode::B, KeyCode::E</autogen>
      </block>
      <autogen>
        __KeyToKey__
        KeyCode::C, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT,
        KeyCode::Y
      </autogen>
      <autogen>
        __KeyToKey__
        KeyCode::D, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT,
        KeyCode::Z
      </autogen>
      <block>
        <only>TERMINAL</only>
        <block>
          <modifier_only>ModifierFlag::OPTION_L, ModifierFlag::OPTION_R</modifier_only>
          <autogen>__KeyToKey__ KeyCode::C, KeyCode::KEY_1</autogen>
        </block>
        <block>
          <modifier_only>ModifierFlag::COMMAND_L, ModifierFlag::COMMAND_R</modifier_only>
          <autogen>__KeyToKey__ KeyCode::C, KeyCode::KEY_2</autogen>
        </block>
      </block>
      <block>
        <only>SAFARI</only>
        <block>
          <modifier_only>ModifierFlag::OPTION_L, ModifierFlag::OPTION_R</modifier_only>
          <autogen>__KeyToKey__ KeyCode::C, KeyCode::KEY_3</autogen>
        </block>
        <block>
          <modifier_only>ModifierFlag::COMMAND_L, ModifierFlag::COMMAND_R</modifier_only>
          <autogen>__KeyToKey__ KeyCode::C, KeyCode::KEY_4</autogen>
        </block>
      </block>
    </item>
  </item>
</root>
