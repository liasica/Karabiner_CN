<?xml version="1.0"?>
<root>
  <item>
    <name>Change Command_L Key (Left Command)</name>
    <item>
      <name>Command_L to Control_L</name>
      <identifier>remap.commandL2controlL</identifier>
      <autogen>__KeyToKey__ KeyCode::COMMAND_L, KeyCode::CONTROL_L</autogen>
    </item>

    <item>
      <name>Variations of specific apps</name>

      <item>
        <name>Command_L to Control_L (only in virtual machine, RDC)</name>
        <identifier>remap.commandL2controlL_vm</identifier>
        <only>VIRTUALMACHINE, REMOTEDESKTOPCONNECTION</only>
        <autogen>__KeyToKey__ KeyCode::COMMAND_L, KeyCode::CONTROL_L</autogen>
      </item>
      <item>
        <name>Command_L to Control_L (only in RDC)</name>
        <identifier>remap.commandL2controlL_rdc</identifier>
        <only>REMOTEDESKTOPCONNECTION</only>
        <autogen>__KeyToKey__ KeyCode::COMMAND_L, KeyCode::CONTROL_L</autogen>
      </item>
      <item>
        <name>Command_L to Control_L (only in Terminal)</name>
        <identifier>remap.commandL2controlL_terminal</identifier>
        <only>TERMINAL</only>
        <autogen>__KeyToKey__ KeyCode::COMMAND_L, KeyCode::CONTROL_L</autogen>
      </item>
      <item>
        <name>Command_L to Control_L (only in Cathode)</name>
        <identifier>remap.commandL2controlL_cathode</identifier>
        <only>CATHODE</only>
        <autogen>__KeyToKey__ KeyCode::COMMAND_L, KeyCode::CONTROL_L</autogen>
      </item>
      <item>
        <name>Command_L to Control_L (only in X11)</name>
        <identifier>remap.commandL2controlL_x11</identifier>
        <only>X11</only>
        <autogen>__KeyToKey__ KeyCode::COMMAND_L, KeyCode::CONTROL_L</autogen>
      </item>
      <item>
        <name>Command_L to Control_L (only in Emacs)</name>
        <identifier>remap.commandL2controlL_emacs</identifier>
        <only>EMACS</only>
        <autogen>__KeyToKey__ KeyCode::COMMAND_L, KeyCode::CONTROL_L</autogen>
      </item>
      <item>
        <name>Command_L to Control_L (except Emacs)</name>
        <identifier>remap.commandL2controlL_ex_emacs</identifier>
        <not>EMACS</not>
        <autogen>__KeyToKey__ KeyCode::COMMAND_L, KeyCode::CONTROL_L</autogen>
      </item>
      <item>
        <name>Command_L to Control_L (except Terminal, Chrome, RDC)</name>
        <identifier>remap.commandL2controlL_excustom</identifier>
        <not>TERMINAL, GOOGLE_CHROME, REMOTEDESKTOPCONNECTION</not>
        <autogen>__KeyToKey__ KeyCode::COMMAND_L, KeyCode::CONTROL_L</autogen>
      </item>
      <item>
        <name>Command_L to Control_L</name>
        <appendix>(except Terminal, Virtual Machine, RDC, VNC, TeamViewer, EMACS, X11, Citrix Viewer)</appendix>
        <identifier>remap.commandL2controlL_extermvm</identifier>
        <not>
          TERMINAL,
          VIRTUALMACHINE,
          REMOTEDESKTOPCONNECTION,
          VNC,
          TEAMVIEWER,
          EMACS,
          X11,
          CITRIX_ONLINE_PLUG_IN,
          CITRIX_XEN_APP_VIEWER,
        </not>
        <autogen>__KeyToKey__ KeyCode::COMMAND_L, KeyCode::CONTROL_L</autogen>
      </item>
      <item>
        <name>Command_L to Control_L (except Virtual Machine, RDC)</name>
        <identifier>remap.commandL2controlL_exvm</identifier>
        <not>VIRTUALMACHINE, REMOTEDESKTOPCONNECTION</not>
        <autogen>__KeyToKey__ KeyCode::COMMAND_L, KeyCode::CONTROL_L</autogen>
      </item>
      <item><name>──────────────────────────────</name></item>
    </item>

    <item>
      <name>Command_L to Fn</name>
      <identifier>remap.commandL2fn</identifier>
      <autogen>__KeyToKey__ KeyCode::COMMAND_L, KeyCode::FN</autogen>
    </item>
    <item>
      <name>Command_L to Option_L</name>
      <identifier>remap.commandL2optionL</identifier>
      <autogen>__KeyToKey__ KeyCode::COMMAND_L, KeyCode::OPTION_L</autogen>
    </item>
    <item>
      <name>Command_L to Option_L (only in virtual machine, RDC)</name>
      <identifier>remap.commandL2optionL_vm</identifier>
      <only>VIRTUALMACHINE, REMOTEDESKTOPCONNECTION</only>
      <autogen>__KeyToKey__ KeyCode::COMMAND_L, KeyCode::OPTION_L</autogen>
    </item>
    <item>
      <name>Command_L to Option_L (only in Emacs)</name>
      <identifier>remap.commandL2optionL_emacs</identifier>
      <only>EMACS</only>
      <autogen>__KeyToKey__ KeyCode::COMMAND_L, KeyCode::OPTION_L</autogen>
    </item>
    <item>
      <name>Command_L to Option_L</name>
      <appendix>(Pass-Through Command+Tab)</appendix>
      <identifier>remap.command_l_to_option_l_except_command_tab</identifier>
      {{ COMMAND_L_TO_OPTION_L_EXCEPT_TAB_EXTRA }}
      <include path="../snippets/modifier_tab_to_command_tab.xml">
        <replacementdef>
          <replacementname>FROM_MODIFIER</replacementname>
          <replacementvalue>COMMAND_L</replacementvalue>
        </replacementdef>
        <replacementdef>
          <replacementname>TO_MODIFIER</replacementname>
          <replacementvalue>OPTION_L</replacementvalue>
        </replacementdef>
      </include>
    </item>
    <item>
      <name>Command_L to Shift_L</name>
      <identifier>remap.commandL2shiftL</identifier>
      <autogen>__KeyToKey__ KeyCode::COMMAND_L, KeyCode::SHIFT_L</autogen>
    </item>
    <item>
      <name>Use the left command key as sticky modifier. (without lock)</name>
      <identifier>remap.sticky_commandL</identifier>
      <include path="../commons/sticky_modifiers/COMMAND_L.xml" />
    </item>
    <item>
      <name>Use the left command key as sticky modifier. (with lock)</name>
      <identifier>remap.sticky_commandL_lock</identifier>
      <include path="../commons/sticky_modifiers/WITH_LOCK.xml">
        <replacementdef>
          <replacementname>FROM_MODIFIER</replacementname>
          <replacementvalue>COMMAND_L</replacementvalue>
        </replacementdef>
        <replacementdef>
          <replacementname>TO_MODIFIER</replacementname>
          <replacementvalue>COMMAND_L</replacementvalue>
        </replacementdef>
      </include>
    </item>
    <item>
      <name>Command_L to ModifierFlag::Extra2</name>
      <identifier>remap.commandL2extra2</identifier>
      <autogen>__KeyToKey__ KeyCode::COMMAND_L, KeyCode::VK_MODIFIER_EXTRA2</autogen>
    </item>
    <item>
      <name>Command_L to Backquote(`)</name>
      <identifier>remap.commandL2backquote</identifier>
      <autogen>__KeyToKey__ KeyCode::COMMAND_L, KeyCode::BACKQUOTE</autogen>
    </item>
    <item>
      <name>Command_L to Escape</name>
      <identifier>remap.commandL2escape</identifier>
      <autogen>__KeyToKey__ KeyCode::COMMAND_L, KeyCode::ESCAPE</autogen>
    </item>
    <item>
      <name>Command_L to Escape (only in Emacs)</name>
      <identifier>remap.commandL2escape_emacs</identifier>
      <only>EMACS</only>
      <autogen>__KeyToKey__ KeyCode::COMMAND_L, KeyCode::ESCAPE</autogen>
    </item>
    <item>
      <name>Command_R+Command_L to Escape</name>
      <appendix>(Note: Escape is sent when you release Command_L)</appendix>
      <identifier>remap.commandRcommandL2escape</identifier>
      <autogen>__KeyOverlaidModifier__ KeyCode::COMMAND_L, ModifierFlag::COMMAND_R, KeyCode::COMMAND_L, ModifierFlag::COMMAND_R, KeyCode::ESCAPE</autogen>
    </item>
    <item>
      <name>Control_L+Command_L to Escape</name>
      <appendix>(Note: Escape is sent when you release Command_L)</appendix>
      <identifier>remap.controlLcommandL2escape</identifier>
      <autogen>__KeyOverlaidModifier__ KeyCode::COMMAND_L, ModifierFlag::CONTROL_L, KeyCode::COMMAND_L, ModifierFlag::CONTROL_L, KeyCode::ESCAPE</autogen>
    </item>
    <item>
      <name>Shift_L+Command_L to Escape</name>
      <appendix>(Note: Escape is sent when you release Command_L)</appendix>
      <identifier>remap.shiftLcommandL2escape</identifier>
      <autogen>__KeyOverlaidModifier__ KeyCode::COMMAND_L, ModifierFlag::SHIFT_L, KeyCode::COMMAND_L, ModifierFlag::SHIFT_L, KeyCode::ESCAPE</autogen>
    </item>
    <item>
      <name>Command_L to Command_L</name>
      <appendix>(+ When you type Command_L only, send Control+F2 (Move focus to the menu bar))</appendix>
      <identifier>remap.commandL2commandL_controlF2</identifier>
      <autogen>__KeyOverlaidModifier__ KeyCode::COMMAND_L, KeyCode::COMMAND_L, KeyCode::F2, ModifierFlag::CONTROL_L</autogen>
    </item>
  </item>

  <item>
    <name>Change Command_R Key (Right Command)</name>
    <item>
      <name>Command_R to Command_R</name>
      <appendix>(+ When you type Command_R only, send Delete)</appendix>
      <identifier>remap.commandR2commandR_delete</identifier>
      <autogen>__KeyOverlaidModifier__ KeyCode::COMMAND_R, KeyCode::COMMAND_R, KeyCode::DELETE</autogen>
    </item>
    <item>
      <name>Command_R to Command_R</name>
      <appendix>(+ When you type Command_R only, send Delete) + [KeyRepeat]</appendix>
      <identifier>remap.commandR2commandR_delete_keyrepeat</identifier>
      <autogen>__KeyOverlaidModifierWithRepeat__ KeyCode::COMMAND_R, KeyCode::COMMAND_R, KeyCode::DELETE</autogen>
    </item>
    <item>
      <name>Command_R to Command_R</name>
      <appendix>(+ When you type Command_R only, send Enter)</appendix>
      <identifier>remap.commandR2commandR_enter</identifier>
      <autogen>__KeyOverlaidModifier__ KeyCode::COMMAND_R, KeyCode::COMMAND_R, KeyCode::ENTER</autogen>
    </item>
    <item>
      <name>Command_R to Command_R</name>
      <appendix>(+ When you type Command_R only, send Enter) + [KeyRepeat]</appendix>
      <identifier>remap.commandR2commandR_enter_keyrepeat</identifier>
      <autogen>__KeyOverlaidModifierWithRepeat__ KeyCode::COMMAND_R, KeyCode::COMMAND_R, KeyCode::ENTER</autogen>
    </item>
    <item>
      <name>Command_R to Command_R</name>
      <appendix>(+ When you type Command_R only, toggle IM)</appendix>
      <item>
        <name>When you type Command_R only, send Command+Space</name>
        <appendix>(except virtual machine, RDC)</appendix>
        <not>VIRTUALMACHINE, REMOTEDESKTOPCONNECTION</not>
        <identifier>remap.commandR2commandR_commandSpace</identifier>
        <autogen>__KeyOverlaidModifier__ KeyCode::COMMAND_R, KeyCode::COMMAND_R, KeyCode::SPACE, ModifierFlag::COMMAND_L</autogen>
      </item>
      <item>
        <name>When you type Command_R only, send Option+Backquote</name>
        <appendix>(only in virtual machine, RDC)</appendix>
        <only>VIRTUALMACHINE, REMOTEDESKTOPCONNECTION</only>
        <identifier>remap.commandR2commandR_optionBackquote_vm</identifier>
        <autogen>__KeyOverlaidModifier__ KeyCode::COMMAND_R, KeyCode::VK_LAZY_COMMAND_R, KeyCode::BACKQUOTE, ModifierFlag::OPTION_L</autogen>
      </item>
    </item>
    <item>
      <name>Command_R to Control_L</name>
      <identifier>remap.commandR2controlL</identifier>
      <autogen>__KeyToKey__ KeyCode::COMMAND_R, KeyCode::CONTROL_L</autogen>
    </item>
    <item>
      <name>Option_R+Command_R to Control_L</name>
      <identifier>remap.optionRcommandR2controlL</identifier>
      <autogen>__KeyToKey__ KeyCode::COMMAND_R, ModifierFlag::OPTION_R, KeyCode::CONTROL_L</autogen>
    </item>
    <item>
      <name>Command_R to Control_R (only in virtual machine, RDC)</name>
      <identifier>remap.commandR2controlR_vm</identifier>
      <only>VIRTUALMACHINE, REMOTEDESKTOPCONNECTION</only>
      <autogen>__KeyToKey__ KeyCode::COMMAND_R, KeyCode::CONTROL_R</autogen>
    </item>
    <item>
      <name>Command_R to Control_L (only in X11)</name>
      <identifier>remap.commandR2controlL_x11</identifier>
      <only>X11</only>
      <autogen>__KeyToKey__ KeyCode::COMMAND_R, KeyCode::CONTROL_L</autogen>
    </item>
    <item>
      <name>Command_R to Control_L (only in Emacs)</name>
      <identifier>remap.commandR2controlL_emacs</identifier>
      <only>EMACS</only>
      <autogen>__KeyToKey__ KeyCode::COMMAND_R, KeyCode::CONTROL_L</autogen>
    </item>
    <item>
      <name>Command_R to Fn</name>
      <identifier>remap.commandR2fn</identifier>
      <autogen>__KeyToKey__ KeyCode::COMMAND_R, KeyCode::FN</autogen>
    </item>
    <item>
      <name>Command_R to Fn (only in virtual machine)</name>
      <identifier>remap.commandR2fn_vm</identifier>
      <only>VIRTUALMACHINE</only>
      <autogen>__KeyToKey__ KeyCode::COMMAND_R, KeyCode::FN</autogen>
    </item>
    <item>
      <name>Option_R+Command_R to Fn</name>
      <identifier>remap.optionRcommandR2fn</identifier>
      <autogen>__KeyToKey__ KeyCode::COMMAND_R, ModifierFlag::OPTION_R, KeyCode::FN</autogen>
    </item>
    <item>
      <name>Command_R to Option_L</name>
      <identifier>remap.commandR2optionL</identifier>
      <autogen>__KeyToKey__ KeyCode::COMMAND_R, KeyCode::OPTION_L</autogen>
    </item>
    <item>
      <name>Command_R to Option_R</name>
      <identifier>remap.commandR2optionR</identifier>
      <autogen>__KeyToKey__ KeyCode::COMMAND_R, KeyCode::OPTION_R</autogen>
    </item>
    <item>
      <name>Command_R to Option_R (only in Emacs, Terminal, X11)</name>
      <identifier>remap.commandR2optionR_etx</identifier>
      <only>EMACS, TERMINAL, X11</only>
      <autogen>__KeyToKey__ KeyCode::COMMAND_R, KeyCode::OPTION_R</autogen>
    </item>
    <item>
      <name>Command_R to Shift_L</name>
      <identifier>remap.commandR2shiftL</identifier>
      <autogen>__KeyToKey__ KeyCode::COMMAND_R, KeyCode::SHIFT_L</autogen>
    </item>
    <item>
      <name>Use the right command key as sticky modifier. (without lock)</name>
      <identifier>remap.sticky_commandR</identifier>
      <include path="../commons/sticky_modifiers/COMMAND_R.xml" />
    </item>
    <item>
      <name>Use the right command key as sticky modifier. (with lock)</name>
      <identifier>remap.sticky_commandR_lock</identifier>
      <include path="../commons/sticky_modifiers/WITH_LOCK.xml">
        <replacementdef>
          <replacementname>FROM_MODIFIER</replacementname>
          <replacementvalue>COMMAND_R</replacementvalue>
        </replacementdef>
        <replacementdef>
          <replacementname>TO_MODIFIER</replacementname>
          <replacementvalue>COMMAND_R</replacementvalue>
        </replacementdef>
      </include>
    </item>
    <item>
      <name>CommandR to ModifierFlag::Extra1</name>
      <identifier>remap.commandR2extra1</identifier>
      <autogen>__KeyToKey__ KeyCode::COMMAND_R, KeyCode::VK_MODIFIER_EXTRA1</autogen>
    </item>
    <item>
      <name>Command_R to Enter</name>
      <identifier>remap.commandR2enter</identifier>
      <autogen>__KeyToKey__ KeyCode::COMMAND_R, KeyCode::ENTER</autogen>
    </item>
    <item>
      <name>Command_R to Escape</name>
      <identifier>remap.commandR2escape</identifier>
      <autogen>__KeyToKey__ KeyCode::COMMAND_R, KeyCode::ESCAPE</autogen>
    </item>
    <item>
      <name>Command_R to Delete</name>
      <identifier>remap.commandR2delete</identifier>
      <autogen>__KeyToKey__ KeyCode::COMMAND_R, KeyCode::DELETE</autogen>
    </item>
    <item>
      <name>Command_R to Forward Delete</name>
      <identifier>remap.commandR2forwarddelete</identifier>
      <autogen>__KeyToKey__ KeyCode::COMMAND_R, KeyCode::FORWARD_DELETE</autogen>
    </item>
    <item>
      <name>Command_R to Hashtag(#)</name>
      <appendix>(Change Command_R to Shift+3)</appendix>
      <identifier>remap.command_r_to_hashtag</identifier>
      <autogen>__KeyToKey__ KeyCode::COMMAND_R, KeyCode::KEY_3, ModifierFlag::SHIFT_L</autogen>
    </item>
    <item>
      <name>Command_R to Home</name>
      <identifier>remap.commandR2home</identifier>
      <autogen>__KeyToKey__ KeyCode::COMMAND_R, KeyCode::HOME</autogen>
    </item>
    <item>
      <name>Command_R to Home (only in virtual machine, RDC)</name>
      <identifier>remap.commandR2home_vm</identifier>
      <only>VIRTUALMACHINE, REMOTEDESKTOPCONNECTION</only>
      <autogen>__KeyToKey__ KeyCode::COMMAND_R, KeyCode::HOME</autogen>
    </item>
    <item>
      <name>Command_R to Home (only in virtual machine, RDC)</name>
      <appendix>(+ Shift+Command_R to Shift+Home,Control_L+C)</appendix>
      <identifier>remap.commandR2home_vm_ex</identifier>
      <only>VIRTUALMACHINE, REMOTEDESKTOPCONNECTION</only>
      <autogen>
        __KeyToKey__
        KeyCode::COMMAND_R, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT,
        KeyCode::HOME, ModifierFlag::SHIFT_L,
        KeyCode::C, ModifierFlag::CONTROL_L,
      </autogen>
      <autogen>__KeyToKey__ KeyCode::COMMAND_R, KeyCode::HOME</autogen>
    </item>
    <item>
      <name>Command_R to Home (only in virtual machine, RDC)</name>
      <appendix>(+ Shift+Command_R to Shift+Home,Command_L+C)</appendix>
      <identifier>remap.commandR2home_vm_ex2</identifier>
      <only>VIRTUALMACHINE, REMOTEDESKTOPCONNECTION</only>
      <autogen>
        __KeyToKey__
        KeyCode::COMMAND_R, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT,
        KeyCode::HOME, ModifierFlag::SHIFT_L,
        KeyCode::C, ModifierFlag::COMMAND_L,
      </autogen>
      <autogen>__KeyToKey__ KeyCode::COMMAND_R, KeyCode::HOME</autogen>
    </item>
    <item>
      <name>Command_R to Command_L+Left-Arrow (beginning-of-line)</name>
      <appendix>(except virtual machine, RDC)</appendix>
      <identifier>remap.commandR2commandLleftarrow</identifier>
      <not>VIRTUALMACHINE, REMOTEDESKTOPCONNECTION</not>
      <autogen>__KeyToKey__ KeyCode::COMMAND_R, KeyCode::CURSOR_LEFT, ModifierFlag::COMMAND_L</autogen>
    </item>
    <item>
      <name>Command_R to Command_L+Left-Arrow (beginning-of-line)</name>
      <appendix>(+ Shift+Command_R to Command_L+Shift_L+Left-Arrow,Command_L+C)</appendix>
      <appendix>(except virtual machine, RDC)</appendix>
      <identifier>remap.commandR2commandLleftarrow_ex</identifier>
      <not>VIRTUALMACHINE, REMOTEDESKTOPCONNECTION</not>
      <autogen>
        __KeyToKey__
        KeyCode::COMMAND_R, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT,
        KeyCode::CURSOR_LEFT, ModifierFlag::COMMAND_L | ModifierFlag::SHIFT_L,
        KeyCode::C, ModifierFlag::COMMAND_L,
      </autogen>
      <autogen>__KeyToKey__ KeyCode::COMMAND_R, KeyCode::CURSOR_LEFT, ModifierFlag::COMMAND_L</autogen>
    </item>
    <item>
      <name>Command_R to Command_L+Left-Arrow (beginning-of-line)</name>
      <appendix>(+ Shift+Command_R to Command_L+Shift_L+Left-Arrow,Control_L+C)</appendix>
      <appendix>(except virtual machine, RDC)</appendix>
      <identifier>remap.commandR2commandLleftarrow_ex2</identifier>
      <not>VIRTUALMACHINE, REMOTEDESKTOPCONNECTION</not>
      <autogen>
        __KeyToKey__
        KeyCode::COMMAND_R, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT,
        KeyCode::CURSOR_LEFT, ModifierFlag::COMMAND_L | ModifierFlag::SHIFT_L,
        KeyCode::C, ModifierFlag::CONTROL_L,
      </autogen>
      <autogen>__KeyToKey__ KeyCode::COMMAND_R, KeyCode::CURSOR_LEFT, ModifierFlag::COMMAND_L</autogen>
    </item>
    <item>
      <name>Command_R to Command_L+Left-Arrow (beginning-of-line)</name>
      <appendix>(+ Control+Command_R, to Command_L+Up-Arrow) (beginning-of-buffer)</appendix>
      <appendix>(Except in Virtual Machine, RDC)</appendix>
      <identifier>remap.commandR2fnleftarrow</identifier>
      <not>VIRTUALMACHINE, REMOTEDESKTOPCONNECTION</not>
      <autogen>__KeyToKey__ KeyCode::COMMAND_R, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_CONTROL, KeyCode::CURSOR_UP,   ModifierFlag::COMMAND_L</autogen>
      <autogen>__KeyToKey__ KeyCode::COMMAND_R,             KeyCode::CURSOR_LEFT, ModifierFlag::COMMAND_L</autogen>
    </item>
    <item>
      <name>Command_R to Command_L+Left-Arrow (beginning-of-line)</name>
      <identifier>remap.commandR2commandLleftarrow_all</identifier>
      <autogen>__KeyToKey__ KeyCode::COMMAND_R, KeyCode::CURSOR_LEFT, ModifierFlag::COMMAND_L</autogen>
    </item>
    <item>
      <name>Command_R to PageUp</name>
      <identifier>remap.commandR2pageup</identifier>
      <autogen>__KeyToKey__ KeyCode::COMMAND_R, KeyCode::PAGEUP</autogen>
    </item>
    <item>
      <name>Command_R to Space</name>
      <identifier>remap.commandR2space</identifier>
      <autogen>__KeyToKey__ KeyCode::COMMAND_R, KeyCode::SPACE</autogen>
    </item>
    <item>
      <name>Command_R to LeftClick</name>
      <identifier>remap.commandR2leftclick</identifier>
      <autogen>__KeyToKey__ KeyCode::COMMAND_R, PointingButton::LEFT</autogen>
    </item>
    <item>
      <name>Command_R to MiddleClick</name>
      <identifier>remap.commandR2middleclick</identifier>
      <autogen>__KeyToKey__ KeyCode::COMMAND_R, PointingButton::MIDDLE</autogen>
    </item>
    <item>
      <name>Command_R to RightClick</name>
      <identifier>remap.commandR2rightclick</identifier>
      <autogen>__KeyToKey__ KeyCode::COMMAND_R, PointingButton::RIGHT</autogen>
    </item>
    <item>
      <name>Command_L+Command_R to Return</name>
      <appendix>(Note: Return is sent when you release Command_R)</appendix>
      <identifier>remap.commandLcommandR2return</identifier>
      <autogen>__KeyOverlaidModifier__ KeyCode::COMMAND_R, ModifierFlag::COMMAND_L, KeyCode::COMMAND_R, ModifierFlag::COMMAND_L, KeyCode::RETURN</autogen>
    </item>
    <item>
      <name>Command_L+Command_R to Enter</name>
      <appendix>(Note: Enter is sent when you release Command_R)</appendix>
      <identifier>remap.commandLcommandR2enter</identifier>
      <autogen>__KeyOverlaidModifier__ KeyCode::COMMAND_R, ModifierFlag::COMMAND_L, KeyCode::COMMAND_R, ModifierFlag::COMMAND_L, KeyCode::ENTER</autogen>
    </item>
    <item>
      <name>Control_L+Command_R to Return</name>
      <appendix>(Note: Return is sent when you release Command_R)</appendix>
      <identifier>remap.controlLcommandR2return</identifier>
      <autogen>__KeyOverlaidModifier__ KeyCode::COMMAND_R, ModifierFlag::CONTROL_L, KeyCode::COMMAND_R, ModifierFlag::CONTROL_L, KeyCode::RETURN</autogen>
    </item>
    <item>
      <name>Shift_L+Command_R to Return</name>
      <appendix>(Note: Return is sent when you release Command_R)</appendix>
      <identifier>remap.shiftLcommandR2return</identifier>
      <autogen>__KeyOverlaidModifier__ KeyCode::COMMAND_R, ModifierFlag::SHIFT_L, KeyCode::COMMAND_R, ModifierFlag::SHIFT_L, KeyCode::RETURN</autogen>
    </item>
    <item>
      <name>Command_R to Command_R</name>
      <appendix>(+ When you type Command_R only, send Control+F8 (Move focus to the status bar))</appendix>
      <identifier>remap.commandR2commandR_controlF8</identifier>
      <autogen>__KeyOverlaidModifier__ KeyCode::COMMAND_R, KeyCode::COMMAND_R, KeyCode::F8, ModifierFlag::CONTROL_L</autogen>
    </item>
    <item>
      <name>Send a section (§) key event when the right command key is pressed alone.</name>
      <identifier>remap.right_command_section</identifier>
      <autogen>__KeyOverlaidModifier__ KeyCode::COMMAND_R, KeyCode::COMMAND_R, KeyCode::UK_SECTION</autogen>
    </item>
  </item>
</root>
